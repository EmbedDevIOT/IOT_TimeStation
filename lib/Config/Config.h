#ifndef _Config_H
#define _Config_H

#include <Arduino.h>

#include <Audio.h>
#include "HardwareSerial.h"
#include <WiFi.h>
#include <WebServer.h>
#include "SPIFFS.h"
#include <microDS3231.h>
#include <ArduinoJson.h>
#include <EncButton.h>
// #include <ElegantOTA.h>

#include <OneWire.h>
#include <DallasTemperature.h>

#define ADR_RTC 0x68
#define ADR_EEPROM 0x57
#define ADR_INA226 0x40
#define ADR_IOEXP 0x20

#define UARTSpeed 115200
#define GPSSpeed 115200

#define WiFi_
#define MAX_MENU  12

#define WiFiTimeON 10
#define Client 0
#define AccessPoint 1
#define WorkNET

#define debug(x) Serial.println(x)
// #define DEBUG
// #define I2C_SCAN

#define DISABLE 0
#define ENABLE 1

#define ON 1
#define OFF 0

//======================    G P I O        =====================
// OUT PINS 
#define LED_STG 14   // Green Led State 
#define LED_STR 12   // Red Led State
#define LED_CHA 19   // Led Channel A
#define LED_CHB 18   // Led Channel B

#define GPS_ON 23    // GPS ON/OFF
#define GPS_RST 13   // GPS Reset



// I2S
#define I2S_DOUT 27
#define I2S_BCLK 26
#define I2S_LRC  25

// INPUT Sensors
#define ALERT 32    // INA226 ALERT
#define BAT 35      // Battery Pin
#define L_SENS 34   // Light Sensor ADC
#define T1 33       // Temperature sensor ds18b20 
#define PWR_SEN 39  // Power Sensor (HIGH or LOW)

// INPUT Buttons
#define INT_BUT 0   // Internal Button
#define EXT_BUT 36  // External Button

// UART 2 - GPS -
#define GPS_SERIAL2
#ifdef GPS_SERIAL2
#define TX2_PIN 17 // UART2_TX
#define RX2_PIN 16 // UART2_RX
#endif
//=======================================================================

//=======================================================================
extern MicroDS3231 RTC;
extern DateTime Clock;
//=======================================================================

//========================== ENUMERATION ================================
  
// MENU 
enum menu
{
  IDLE = 0,
  _CAR_NUM,
  _GMT,
  _MIN,
  _HOUR,
  _DAY,
  _MONTH,
  _YEAR,
  _BRIGHT,
  _VOL,
  _WCL,
  _WCSS,
  _WiFi
};

enum Clicks
{
  ONE = 1,
  TWO,
  THREE
};

enum DAY
{
  MON = 1,
  TUE,
  WED,
  THU,
  FRI,
  SAT,
  SUN
};

enum MONTH
{
  YAN = 1,
  FEB,
  MAR,
  APR,
  MAY,
  JUN,
  JUL,
  AUG,
  SEP,
  OCTB,
  NOV,
  DECM,
};


enum LIGHT_VALUE
{
    high_lev = 4095,
    low_lev = 670
};


//=======================================================================
/*
_____   ___    _________       _________  _                       ______    _          _    _                   
|_   _|.'   `. |  _   _  |     |  _   _  |(_)                    .' ____ \  / |_       / |_ (_)                  
 | | /  .-.  \|_/ | | \_|     |_/ | | \_|__   _ .--..--.  .---. | (___ \_|`| |-',--. `| |-'__   .--.   _ .--.   
 | | | |   | |    | |             | |   [  | [ `.-. .-. |/ /__\\ _.____`.  | | `'_\ : | | [  |/ .'`\ \[ `.-. |  
_| |_\  `-'  /   _| |_  _______  _| |_   | |  | | | | | || \__.,| \____) | | |,// | |,| |, | || \__. | | | | |  
|_____|`.___.'   |_____||_______||_____| [___][___||__||__]'.__.' \______.' \__/\'-;__/\__/[___]'.__.' [___||__] 
*/
// uint8_t asciiArt1[5][128] = {
//   {0x20,0x5F,0x5F,0x5F,0x5F,0x5F,0x20,0x20,0x20,0x5F,0x5F,0x5F,0x20,0x20,0x20,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x20,0x20,0x20,0x20,0x20,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x20,0x20,0x5F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x20,0x20,0x20,0x20,0x5F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x5F,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20},
//   {0x7C,0x5F,0x20,0x20,0x20,0x7C,0x2E,0x27,0x20,0x20,0x20,0x60,0x2E,0x20,0x7C,0x20,0x20,0x5F,0x20,0x20,0x20,0x5F,0x20,0x7C,0x20,0x20,0x20,0x20,0x7C,0x5F,0x2F,0x20,0x7C,0x20,0x7C,0x20,0x5C,0x5F,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x2E,0x27,0x20,0x5F,0x5F,0x5F,0x5F,0x20,0x5C,0x20,0x20,0x2F,0x20,0x7C,0x5F,0x20,0x20,0x20,0x20,0x20,0x2F,0x20,0x7C,0x5F,0x20,0x28,0x5F,0x29,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20},
//   {0x7C,0x20,0x7C,0x20,0x2F,0x20,0x20,0x2E,0x2D,0x2E,0x20,0x20,0x5C,0x7C,0x5F,0x2F,0x20,0x7C,0x20,0x7C,0x20,0x5C,0x5F,0x7C,0x20,0x20,0x20,0x20,0x7C,0x5F,0x2F,0x20,0x7C,0x20,0x7C,0x20,0x5C,0x5F,0x7C,0x5F,0x5F,0x20,0x20,0x20,0x5F,0x20,0x2E,0x2D,0x2D,0x2E,0x2E,0x2D,0x2D,0x2E,0x20,0x7C,0x2F,0x20,0x2F,0x5F,0x5F,0x5C,0x5C,0x20,0x2E,0x5F,0x2E,0x5F,0x5F,0x5F,0x60,0x2E,0x20,0x20,0x7C,0x20,0x7C,0x20,0x60,0x27,0x5F,0x5C,0x20,0x3A,0x20,0x7C,0x20,0x7C,0x20,0x5B,0x20,0x20,0x7C,0x2F,0x20,0x2E,0x27,0x60,0x5C,0x5C,0x5B,0x20,0x60,0x2E,0x2D,0x2E,0x20,0x7C},
//   {0x7C,0x20,0x7C,0x20,0x7C,0x20,0x20,0x20,0x7C,0x20,0x7C,0x20,0x20,0x7C,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x7C,0x20,0x7C,0x20,0x20,0x20,0x5B,0x20,0x20,0x7C,0x20,0x5D,0x20,0x7C,0x20,0x7C,0x20,0x7C,0x20,0x7C,0x20,0x7C,0x20,0x7C,0x7C,0x20,0x5C,0x5F,0x5F,0x5F,0x5F,0x2E,0x2C,0x7C,0x20,0x7C,0x20,0x2F,0x2F,0x20,0x7C,0x20,0x7C,0x2C,0x20,0x7C,0x20,0x7C,0x2C,0x20,0x7C,0x20,0x7C,0x20,0x5B,0x20,0x20,0x7C,0x7C,0x20,0x5C,0x5F,0x5F,0x20,0x7C,0x20,0x7C,0x20,0x7C,0x20,0x7C,0x20,0x7C,0x20,0x7C,0x20,0x7C,0x20,0x7C},
//   {0x7C,0x5F,0x5F,0x5F,0x5F,0x5F,0x7C,0x60,0x2E,0x5F,0x5F,0x5F,0x2E,0x27,0x20,0x20,0x20,0x7C,0x5F,0x5F,0x5F,0x5F,0x5F,0x7C,0x7C,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x5F,0x7C,0x7C,0x5F,0x5F,0x5F,0x5F,0x5F,0x7C,0x20,0x5B,0x5F,0x5F,0x5F,0x5D,0x5B,0x5F,0x5F,0x5F,0x5F,0x7C,0x7C,0x5F,0x5F,0x5D,0x27,0x2E,0x5F,0x5F,0x2E,0x27,0x20,0x5C,0x5F,0x5F,0x5F,0x5F,0x5F,0x2E,0x27,0x20,0x5C,0x5F,0x5F,0x2F,0x5C,0x27,0x2D,0x3B,0x5F,0x5F,0x2F,0x5C,0x5F,0x5F,0x2F,0x5B,0x5F,0x5F,0x5F,0x5D,0x27,0x2E,0x5F,0x5F,0x2E,0x27,0x20,0x5B,0x5F,0x5F,0x5F,0x5F,0x7C,0x7C,0x5F,0x5F,0x5D}
// };
//=========================== GLOBAL CONFIG =============================
struct GlobalConfig
{
  uint16_t sn = 0;
  String fw = ""; // accepts from setup()
  String fwdate = "";
  String chipID = "";
  String MacAdr = "";
  String NTPServer = "pool.ntp.org";
  String APSSID = "GKTime";
  String APPAS = "gktime";

  String Ssid = "EMBNET2G";           // SSID Wifi network
  String Password = "Ae19co90$!eT"; // Passwords WiFi network

  int gmt = 0;

  char time[7] = "";
  char date[9] = "";

  byte IP1 = 192;
  byte IP2 = 168;
  byte IP3 = 1;
  byte IP4 = 1;
  byte GW1 = 192;
  byte GW2 = 168;
  byte GW3 = 1;
  byte GW4 = 1;
  byte MK1 = 255;
  byte MK2 = 255;
  byte MK3 = 255;
  byte MK4 = 0;

  byte WiFiMode = AccessPoint; // Режим работы WiFi
};
extern GlobalConfig CFG;
//=======================================================================

//=======================================================================
struct HardwareConfig
{
  uint8_t VOL = 21;      // Volume  1...21
  int8_t bright = 70;       // Led Brightness 
  float dsT1 = 0.0;         // Temperature T1 
  int8_t T1_off = 0;     // Temperature Offset T1 sensor

  uint8_t ERRORcnt = 0;
};
extern HardwareConfig HWCFG;
//=======================================================================

//=======================================================================
struct Flag
{
  bool I2C_Block = 0;
  uint8_t cnt_Supd = 0;
  bool DynamicUPD : 1;
  bool DUPDBlock : 1;
  bool IDLE : 1;
  bool LedWiFi : 1;
  bool LedRS : 1;
  bool LedUser : 1;
  bool SaveFlash : 1;
  bool Debug : 1;
  bool CurDebug : 1;
  bool WiFiEnable : 1;  
  bool TTS : 1;        // Time to speech
  bool VolumeUPD : 1;  // Volume update
  bool SensWC1 = 0;    // Sensor WC1 current state
  bool SensWC2 = 0;    // Sensor WC2 current state
  uint8_t menu_tmr = 0;  
};
extern Flag STATE;
//============================================================================
//============================================================================
bool GetWCState(uint8_t num);
boolean SerialNumConfig(void);
void UserPresetInit(void);
void SystemInit(void);     //  System Initialisation (variables and structure)
void I2C_Scanning(void);
void ShowInfoDevice(void); //  Show information or this Device
void GetChipID(void);
String GetMacAdr();
void DebugInfo(void);
void SystemFactoryReset(void);
void ShowFlashSave(void);
//============================================================================
#endif // _Config_H